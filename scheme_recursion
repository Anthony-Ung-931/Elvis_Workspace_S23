(define (num_pos L)
	; Return the number of positive numbers in list L
	(cond	((null? L)	0)
		((> (car L) 0)	(+ 1 (num_pos (cdr L))))
		(else		(num_pos (cdr L)))))
			
(define (list_pos L)
	; Return a list of the positive numbers in list L
	(cond	((null? L)	'())
		((> (car L) 0)	(cons (car L) (list_pos (cdr L))))
		(else		(list_pos (cdr L))) ))


(define (occurs Item L)
	; Return the number of occurrences of Item in list L
	(cond	((null? L)		0)	; Empty List
		; eq - Good choice for symbols.
		; equal - Most broad
		((equal? (car L) Item) 	(+ 1 (occurs Item (cdr L))))
		(else			(occurs Item (cdr L))) ))

(define (all-pos? L)
	; Return #T if all the numbers in list L are positive; otherwise #F
	(cond	((null? L)	#T)
		((<= (car L) 0)	#F)
		(else		(all-pos? (cdr L))) ))

;(define (has-pos? L)
	; Return #T if at least one of the numbers in list L is positive;
	; otherwise #F


(define (capital State SCList)
	; Return the capital of State in SCList
	; SCList is a list of state-capital pairs
	; (capital 'nj '((nj trenton) (de dover) (va richmond))) should
	; return trenton
	; Return 'none if not found
	(cond	((null? SCList) 		; Base Case		
				'none)
		((eq? State (caar SCList)) 
				; Reminder: cdr always returns a list	
				(cadar SCList))	; Match at head
		(else
				(capital State (cdr SCList))) ))
